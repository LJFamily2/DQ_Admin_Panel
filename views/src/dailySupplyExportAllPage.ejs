<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Đăng Quang</title>
  <link rel="shortcut icon" href="/images/OIG3.HcFjYMBA3iNvsE-removebg-preview.png" type="image/x-icon" />
  <link rel="stylesheet" href="/css/globalStyle.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous" defer></script>
  <style>
    h4,
    h5,
    table {
      text-align: center;
    }

    h4,
    h5,
    h6 {
      font-size: small;
    }

    table {
      font-size: small;
    }

    p {
      font-size: 0.8rem;
    }

    .page-break {
      page-break-after: always;
    }

    .hidden-column {
      display: none;
    }

    .sticky-column-selection {
      position: sticky;
      top: 0;
      z-index: 1000;
      background-color: white;
      padding: 10px 0;
      height: 4rem;
    }

    .form-check-input,
    .form-check-label {
      cursor: pointer;
    }

    .scrollspy-container {
      position: fixed;
      right: 0;
      top: 4rem;
      border-left: 1px solid rgba(0, 0, 0, 0.5);
      overflow: auto;
      scrollbar-width: none;
      /* For Firefox */
      background: white;

      ::-webkit-scrollbar {
        width: 0;
        /* For Chrome, Safari, and Opera */
      }
    }


    .scrollspy-container .form-check {
      margin-bottom: 10px;
    }

    .print-footer {
      display: none;
    }

    @media print {
      @page {
        margin: 0.22in;
      }

      .scrollspy-example {
        width: 100% !important;
      }

      table {

        th,
        td {
          font-size: 0.65rem;
          padding: 2px !important;
          border: 1px solid black !important;
        }
      }

      hr {
        margin: 0;
      }

      .no-print {
        display: none !important;
      }

      .print-footer {
        display: block !important;
        position: fixed;
        bottom: 0;
        width: 100%;
        text-align: center;
        font-size: 0.7rem;
        padding: 10px;
      }
    }
  </style>
</head>

<body>
  <div class="container-fluid p-0">
    <!-- Column selection checkboxes -->
    <div class="column-selection no-print px-3 sticky-column-selection d-flex justify-content-between align-items-center" style="border-bottom: 1px solid rgba(0, 0, 0, 0.5);">
      <div class="column-selection">
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-date" data-column="date" checked>
          <label class="form-check-label" for="toggle-date">Ngày</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-muNuoc" data-column="muNuoc" checked>
          <label class="form-check-label" for="toggle-muNuoc">Mủ nước</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-muTap" data-column="muTap" checked>
          <label class="form-check-label" for="toggle-muTap">Mủ tạp</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-muKe" data-column="muKe" checked>
          <label class="form-check-label" for="toggle-muKe">Mủ ké</label>
        </div>
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-muDong" data-column="muDong" checked>
          <label class="form-check-label" for="toggle-muDong">Mủ đông</label>
        </div>
        <% if(area.areaPrice > 0 && area.areaDimension > 0){ %>
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-tongTien" data-column="tongTien" checked>
          <label class="form-check-label" for="toggle-tongTien">Tổng tiền</label>
        </div>
        <% } %>
        <div class="form-check form-check-inline">
          <input class="form-check-input column-toggle" type="checkbox" id="toggle-khac" data-column="khac" checked>
          <label class="form-check-label" for="toggle-khac">Khác</label>
        </div>
      </div>
      <div>
        <!-- Print button -->
        <button class="btn btn-primary no-print" onclick="window.print()">In</button>
      </div>
    </div>
    <div class="p-2 no-print" style="width: 90%;">
      <label class="form-label fw-bold">Nhập số lượng từng mệnh giá</label>
      <div class="row d-flex">
        <div class="col form-check">
          <label class="form-check-label" for="denomination500000" style="font-size: small;">500,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination500000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination200000" style="font-size: small;">200,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination200000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination100000" style="font-size: small;">100,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination100000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination50000" style="font-size: small;">50,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination50000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination20000" style="font-size: small;">20,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination20000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination10000" style="font-size: small;">10,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination10000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination5000" style="font-size: small;">5,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination5000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination2000" style="font-size: small;">2,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination2000" value="0" min="0">
        </div>
        <div class="col form-check">
          <label class="form-check-label" for="denomination1000" style="font-size: small;">1,000 VNĐ</label>
          <input class="form-control" type="number" name="denomination" id="denomination1000" value="0" min="0">
        </div>
        <div class="col">
          <label class="form-check-label"></label>
          <button type="button" class="btn btn-primary form-control" onclick="suggestMoneyDistributionForAll()">Gợi ý</button>
        </div>
        <div id="availableMoney" class="mt-3"></div>
      </div>
    </div>


    <div class="container-fluid p-0 d-flex">
      <div data-bs-spy="scroll" data-bs-target="#list-example" data-bs-offset="0" class="scrollspy-example" style="width: 90% ;background: rgb(245, 245, 245)">
        <% data.forEach((supplier, index) => { %>
        <div id="supplier<%= index %>" class="supplier-section <%= index === data.length - 1 ? '' : 'page-break' %> m-2 p-2 " style="background: white;">
          <h4 style="font-weight: bold; position: relative;">PHIẾU TÍNH TIỀN MỦ CAO SU <span style="position: absolute; right: 0; font-style: italic;">Số: <%= index + 1 %></span></h4>
          <h5>(<%= startDate ? new Date(startDate).toLocaleDateString('vi-VN') : "Không ngày" %> - <%= endDate ? new Date(endDate).toLocaleDateString('vi-VN') : "Không ngày" %>)</h5>
          <h6>Tên: <%= supplier.supplierName %> </h6>
          <table class="table table-bordered">
            <thead>
              <tr>
                <th class="date" rowspan="2">Ngày</th>
                <% if (area.areaDimension > 0 && area.areaPrice > 0) { %>
                <th class="muNuoc" colspan="7">Mủ nước</th>
                <th class="muTap" colspan="5">Mủ tạp</th>
                <th class="muKe" colspan="5">Mủ ké</th>
                <th class="muDong" colspan="5">Mủ đông</th>
                <th class="tongTien" rowspan="2">Tổng tiền</th>
                <% } else { %>
                <th class="muNuoc" colspan="3">Mủ nước</th>
                <th class="muTap">Mủ tạp</th>
                <th class="muKe">Mủ ké</th>
                <th class="muDong">Mủ đông</th>
                <% } %>
                <th class="khac" rowspan="2">Khác</th>
              </tr>
              <tr>
                <% if (area.areaDimension > 0 && area.areaPrice > 0) { %>
                <th class="muNuoc">SL</th>
                <th class="muNuoc">HL%</th>
                <th class="muNuoc">Quy khô trc</th>
                <th class="muNuoc">Đơn giá</th>
                <th class="muNuoc">TL(%)</th>
                <th class="muNuoc">Quy khô sau</th>
                <th class="muNuoc">Thành tiền</th>
                <th class="muTap">SL</th>
                <th class="muTap">Đơn giá</th>
                <th class="muTap">TL(%)</th>
                <th class="muTap">SL sau</th>
                <th class="muTap">Thành tiền</th>
                <th class="muKe">SL</th>
                <th class="muKe">Đơn giá</th>
                <th class="muKe">TL(%)</th>
                <th class="muKe">SL sau</th>
                <th class="muKe">Thành tiền</th>
                <th class="muDong">SL</th>
                <th class="muDong">Đơn giá</th>
                <th class="muDong">TL(%)</th>
                <th class="muDong">SL sau</th>
                <th class="muDong">Thành tiền</th>
                <% } else { %>
                <th class="muNuoc">SL</th>
                <th class="muNuoc">HL%</th>
                <th class="muNuoc">Quy khô</th>
                <th class="muTap">SL</th>
                <th class="muKe">SL</th>
                <th class="muDong">SL</th>
                <% } %>
              </tr>
            </thead>
            <tbody>
              <% let totals = { muQuyKho: 0, muQuyKhoAfter: 0, muQuyKhoTotalPrice: 0, muTap: 0, muTapAfter: 0, muTapTotalPrice: 0, muKe: 0, muKeAfter: 0, muKeTotalPrice: 0, muDong: 0, muDongAfter: 0, muDongTotalPrice: 0, totalPrice: 0 }; %>
              <% supplier.data.forEach((item) => { %>
              <tr>
                <td class="date"> <%= item.date.split('/').slice(0,2).join('/') %></td>
                <% if (area.areaDimension > 0 && area.areaPrice > 0) { %>
                <td class="muNuoc"><%= item.muNuocQuantity %></td>
                <td class="muNuoc"><%= item.muHamLuong %></td>
                <td class="muNuoc"><%= item.muQuyKhoTotal %></td>
                <td class="muNuoc"><%= item.muQuyKhoPrice %></td>
                <td class="muNuoc"><%= item.muNuocRatioSplit %></td>
                <td class="muNuoc"><%= item.muQuyKhoTotalAfterSplit %></td>
                <td class="muNuoc"><%= item.muQuyKhoTotalPrice %></td>
                <td class="muTap"><%= item.muTapQuantity %></td>
                <td class="muTap"><%= item.muTapPrice %></td>
                <td class="muTap"><%= item.muTapRatioSplit %></td>
                <td class="muTap"><%= item.muTapTotalAfterSplit %></td>
                <td class="muTap"><%= item.muTapTotalPrice %></td>
                <td class="muKe"><%= item.muKeQuantity %></td>
                <td class="muKe"><%= item.muKePrice %></td>
                <td class="muKe"><%= item.muKeRatioSplit %></td>
                <td class="muKe"><%= item.muKeTotalAfterSplit %></td>
                <td class="muKe"><%= item.muKeTotalPrice %></td>
                <td class="muDong"><%= item.muDongQuantity %></td>
                <td class="muDong"><%= item.muDongPrice %></td>
                <td class="muDong"><%= item.muDongRatioSplit %></td>
                <td class="muDong"><%= item.muDongTotalAfterSplit %></td>
                <td class="muDong"><%= item.muDongTotalPrice %></td>
                <td class="tongTien"><%= item.totalPrice %></td>
                <% } else { %>
                <td class="muNuoc"><%= item.muNuocQuantity %></td>
                <td class="muNuoc"><%= item.muHamLuong %></td>
                <td class="muNuoc"><%= item.muQuyKhoTotal %></td>
                <td class="muTap"><%= item.muTapQuantity %></td>
                <td class="muKe"><%= item.muKeQuantity %></td>
                <td class="muDong"><%= item.muDongQuantity %></td>
                <% } %>
                <td class="khac"><%= item.note %></td>
              </tr>
              <% totals.muQuyKho += parseFloat(item.muQuyKhoTotal.replace(',', '.')) || 0; %>
              <% totals.muQuyKhoAfter += parseFloat(item.muQuyKhoTotalAfterSplit.replace(',', '.')) || 0; %>
              <% totals.muQuyKhoTotalPrice += parseFloat(item.muQuyKhoTotalPrice.replace(/\./g, '').replace(',', '.')) || 0; %>
              <% totals.muTap += parseFloat(item.muTapQuantity.replace(',', '.')) || 0; %>
              <% totals.muTapAfter += parseFloat(item.muTapTotalAfterSplit.replace(',', '.')) || 0; %>
              <% totals.muTapTotalPrice += parseFloat(item.muTapTotalPrice.replace(/\./g, '').replace(',', '.')) || 0; %>
              <% totals.muKe += parseFloat(item.muKeQuantity.replace(',', '.')) || 0; %>
              <% totals.muKeAfter += parseFloat(item.muKeTotalAfterSplit.replace(',', '.')) || 0; %>
              <% totals.muKeTotalPrice += parseFloat(item.muKeTotalPrice.replace(/\./g, '').replace(',', '.')) || 0; %>
              <% totals.muDong += parseFloat(item.muDongQuantity.replace(',', '.')) || 0; %>
              <% totals.muDongAfter += parseFloat(item.muDongTotalAfterSplit.replace(',', '.')) || 0; %>
              <% totals.muDongTotalPrice += parseFloat(item.muDongTotalPrice.replace(/\./g, '').replace(',', '.')) || 0; %>
              <% totals.totalPrice += parseFloat(item.totalPrice.replace(/\./g, '').replace(',', '.')) || 0; %>
              <% }) %>
            </tbody>
            <tfoot>
              <tr>
                <th class="date">Tổng</th>
                <% if (area.areaDimension > 0 && area.areaPrice > 0) { %>
                <th class="muNuoc" class="date" colspan="2"></th>
                <th class="muNuoc"><%= totals.muQuyKho.toLocaleString('vi-VN') %></th>
                <th class="muNuoc" colspan="2"></th>
                <th class="muNuoc"><%= totals.muQuyKhoAfter.toLocaleString('vi-VN') %></th>
                <th class="muNuoc"><%= totals.muQuyKhoTotalPrice.toLocaleString('vi-VN') %></th>
                <th class="muTap"><%= totals.muTap.toLocaleString('vi-VN') %></th>
                <th class="muTap" colspan="2"></th>
                <th class="muTap"><%= totals.muTapAfter.toLocaleString('vi-VN') %></th>
                <th class="muTap"><%= totals.muTapTotalPrice.toLocaleString('vi-VN') %></th>
                <th class="muKe"><%= totals.muKe.toLocaleString('vi-VN') %></th>
                <th class="muKe" colspan="2"></th>
                <th class="muKe"><%= totals.muKeAfter.toLocaleString('vi-VN') %></th>
                <th class="muKe"><%= totals.muKeTotalPrice.toLocaleString('vi-VN') %></th>
                <th class="muDong"><%= totals.muDong.toLocaleString('vi-VN') %></th>
                <th class="muDong" colspan="2"></th>
                <th class="muDong"><%= totals.muDongAfter.toLocaleString('vi-VN') %></th>
                <th class="muDong"><%= totals.muDongTotalPrice.toLocaleString('vi-VN') %></th>
                <th class="tongTien"><%= totals.totalPrice.toLocaleString('vi-VN') %></th>
                <% } else { %>
                <th class="date" colspan="2"></th>
                <th class="muNuoc"><%= totals.muQuyKho.toLocaleString('vi-VN') %></th>
                <th class="muTap"><%= totals.muTap.toLocaleString('vi-VN') %></th>
                <th class="muKe"><%= totals.muKe.toLocaleString('vi-VN') %></th>
                <th class="muDong"><%= totals.muDong.toLocaleString('vi-VN') %></th>
                <% } %>
                <th class="khac"></th>
              </tr>
              <% if (!(area.areaDimension > 0 && area.areaPrice > 0)) { %>
              <tr>
                <th class="date">Đơn giá</th>
                <th class="muNuoc" colspan="3"><%= latestPrices.muNuoc.toLocaleString('vi-VN') %></th>
                <th class="muTap"><%= latestPrices.muTap.toLocaleString('vi-VN') %></th>
                <th class="muKe"><%= latestPrices.muKe.toLocaleString('vi-VN') %></th>
                <th class="muDong"><%= latestPrices.muDong.toLocaleString('vi-VN') %></th>
                <th class="khac"></th>
              </tr>
              <tr>
                <th class="date">Thành tiền</th>
                <th class="muNuoc" colspan="3"><%= (totals.muQuyKho * latestPrices.muNuoc).toLocaleString('vi-VN') %></th>
                <th class="muTap"><%= (totals.muTap * latestPrices.muTap).toLocaleString('vi-VN') %></th>
                <th class="muKe"><%= (totals.muKe * latestPrices.muKe).toLocaleString('vi-VN') %></th>
                <th class="muDong"><%= (totals.muDong * latestPrices.muDong).toLocaleString('vi-VN') %></th>
                <th class="khac"></th>
              </tr>
              <% } %>
            </tfoot>
          </table>
          <p>Tổng số tiền: <span id="totalAmount<%= index %>"><%= Math.round(((totals.muQuyKho * latestPrices.muNuoc) + (totals.muTap * latestPrices.muTap) + (totals.muKe * latestPrices.muKe) + (totals.muDong * latestPrices.muDong))).toLocaleString('vi-VN') %></span></p>
          <p class="addContainer<%= index %> no-print d-flex align-items-center">Cộng:
            <input type="number" class="form-control addPriceInput no-print mx-2" style="width: auto;" data-index="<%= index %>" oninput="updateFinalAmount(<%= index %>); document.getElementById('addPriceValue<%= index %>').textContent = isNaN(parseFloat(this.value)) ? '' : Math.round(parseFloat(this.value)).toLocaleString('vi-VN')">
            <span id="addPriceValue<%= index %>"></span>
          </p>
          <p class="minusContainer<%= index %> no-print d-flex align-items-center">Trừ:
            <input type="number" class="form-control minusPriceInput no-print mx-2" style="width: auto;" data-index="<%= index %>" oninput="updateFinalAmount(<%= index %>); document.getElementById('minusPriceValue<%= index %>').textContent = isNaN(parseFloat(this.value)) ? '' : Math.round(parseFloat(this.value)).toLocaleString('vi-VN')">
            <span id="minusPriceValue<%= index %>"></span>
          </p>
          <p class="finalAmountContainer<%= index %> no-print">Tổng sau cộng/trừ: <span id="finalAmountSpan<%= index %>"></span></p>
          <p class="<%= supplier.ratioSumSplit === 100 ? 'no-print' : '' %>">Tỉ lệ phân chia tổng: <span class="ratioSumSplit" data-index="<%= index %>"><%= supplier.ratioSumSplit %></span>%</p>
          <hr>
          <div style="display: flex; justify-content: space-between; margin-top: 20px;">
            <p>Thực nhận: <span class="totalGet" id="finalAmountDisplay<%= index %>"></span></p>
            <div style="display:flex; flex-direction: column; align-items: flex-end;">
              <% if (supplier.initialDebtAmount > 0) { %>
              <p>Công nợ còn lại: <%= Math.round(remainingDebt).toLocaleString('vi-VN') %></p>
              <% } %>
              <% if (totalMoneyRetainedAmount > 0) { %>
              <p>Tổng tiền giữ lại: <%= Math.round(totalMoneyRetainedAmount).toLocaleString('vi-VN') %></p>
              <% } %>
            </div>
          </div>
          <!-- Display the money suggestion -->
          <div class="suggestionResult<%= index %> mt-3 no-print"></div>
        </div>
        <!-- Footer -->
        <footer class="print-footer">
          Vui lòng mang theo phiếu nếu sai xót
        </footer>
        <% }) %>
      </div>
      <div id="list-example" class="scrollspy-container no-print" style="width: 10%; height: calc(100vh - 4rem);">
        <% data.forEach((supplier, index) => { %>
        <div class="list-group">
          <a class="list-group-item list-group-item-action no-print rounded-0" href="#supplier<%= index %>" style="font-size: 0.9rem;">
            <input class="form-check-input supplier-toggle" type="checkbox" id="toggle-supplier<%= index %>" data-index="<%= index %>" checked>
            <%= supplier.supplierName %> <small>(<%= supplier.supplierCode %>)</small>
          </a>
        </div>
        <% }) %>
      </div>
    </div>

  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      document.querySelectorAll('.table').forEach((_, index) => updateFinalAmount(index));

      document.querySelectorAll('.addPriceInput, .minusPriceInput').forEach(input =>
        input.addEventListener('input', function() {
          const index = this.dataset.index;
          updateFinalAmount(index);
        })
      );

      // Supplier toggle functionality
      document.querySelectorAll('.supplier-toggle').forEach(toggle => {
        toggle.addEventListener('change', function() {
          const index = this.dataset.index;
          const isChecked = this.checked;
          document.getElementById(`supplier${index}`).style.display = isChecked ? '' : 'none';
        });
      });
    });

    function updateFinalAmount(index) {
      const totalAmount = parseFloat(document.getElementById(`totalAmount${index}`).textContent.replace(/\./g, '').replace(/,/g, '.')) || 0;
      const addPrice = parseFloat(document.querySelector(`.addPriceInput[data-index='${index}']`).value) || 0;
      const minusPrice = parseFloat(document.querySelector(`.minusPriceInput[data-index='${index}']`).value) || 0;
      const ratioSumSplit = parseFloat(document.querySelector(`.ratioSumSplit[data-index='${index}']`).textContent) || 0;

      const finalAmountAfter = totalAmount + addPrice - minusPrice;
      const finalAmount = finalAmountAfter * (ratioSumSplit / 100);

      document.getElementById(`finalAmountSpan${index}`).textContent = finalAmountAfter.toLocaleString('vi-VN');
      document.getElementById(`finalAmountDisplay${index}`).textContent = finalAmount.toLocaleString('vi-VN');

      const addContainer = document.querySelector(`.addContainer${index}`);
      const minusContainer = document.querySelector(`.minusContainer${index}`);
      const finalAmountContainer = document.querySelector(`.finalAmountContainer${index}`);

      const toggleNoPrint = (element, condition) => {
        if (element) {
          element.classList.toggle('no-print', !condition);
        }
      };

      toggleNoPrint(addContainer, addPrice > 0);
      toggleNoPrint(minusContainer, minusPrice > 0);
      toggleNoPrint(finalAmountContainer, addPrice > 0 || minusPrice > 0);
    }
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Column toggle functionality
      document.querySelectorAll('.column-toggle').forEach(toggle => {
        toggle.addEventListener('change', function() {
          const columnClass = this.dataset.column;
          const isChecked = this.checked;
          document.querySelectorAll(`.${columnClass}`).forEach(element => {
            element.style.display = isChecked ? '' : 'none';
          });
        });
      });
    });
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const scrollspyContainer = document.getElementById('list-example');
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.attributeName === 'class') {
            const activeElement = scrollspyContainer.querySelector('.active');
            if (activeElement) {
              activeElement.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest'
              });
            }
          }
        });
      });

      const config = {
        attributes: true,
        childList: false,
        subtree: true
      };
      const targetNode = scrollspyContainer;
      observer.observe(targetNode, config);
    });
  </script>
  <script>
    const denominations = [500000, 200000, 100000, 50000, 20000, 10000, 5000, 2000, 1000];
    const dailySupplyId = '<%= area.slug %>'; // Replace with the actual daily supply ID

    function getOptimalMoneyDistribution(totalPrice, availableQuantities) {
      const distribution = {};
      let remainingAmount = totalPrice;

      denominations.forEach(denomination => {
        let count = Math.min(Math.floor(remainingAmount / denomination), availableQuantities[denomination] || 0);
        if (count > 0) {
          distribution[denomination] = count;
          remainingAmount -= count * denomination;
        }
      });

      return {
        distribution,
        remainingAmount
      };
    }

    function suggestMoneyDistributionForAll() {
      const suppliers = document.querySelectorAll('.supplier-section');
      const initialQuantities = {};
      let availableQuantities = {};

      denominations.forEach(denomination => {
        const element = document.getElementById(`denomination${denomination}`);
        if (element) {
          initialQuantities[denomination] = parseInt(element.value) || 0;
          availableQuantities[denomination] = initialQuantities[denomination];
        } else {
          initialQuantities[denomination] = 0;
          availableQuantities[denomination] = 0;
        }
      });

      suppliers.forEach((supplier, index) => {
        const totalGet = supplier.querySelector('.totalGet');
        let resultHtml = '<h6 style="font-size: medium">Phân phối tiền:</h6><ul style=font-size: small>';

        let totalPrice = parseInt(totalGet.textContent.replace(/\./g, '').replace(/\,/g, '.')) || 0;
        totalPrice = Math.round(totalPrice / 1000) * 1000;

        const {
          distribution,
          remainingAmount
        } = getOptimalMoneyDistribution(totalPrice, availableQuantities);

        resultHtml += `<li>Tổng số tiền (${totalPrice.toLocaleString('vi-VN')} VNĐ):<ul>`;
        Object.entries(distribution).forEach(([denomination, count]) => {
          resultHtml += `<li class="text-success">${count} tờ ${parseInt(denomination).toLocaleString('vi-VN')} VNĐ</li>`;
          availableQuantities[denomination] -= count;
        });
        resultHtml += '</ul></li>';

        if (remainingAmount > 0) {
          resultHtml += `<li class="text-danger">Thiếu ${remainingAmount.toLocaleString('vi-VN')} VNĐ</li>`;
        }

        resultHtml += '</ul>';
        supplier.querySelector(`.suggestionResult${index}`).innerHTML = resultHtml;
      });

      updateAvailableMoney(availableQuantities);
    }

    function updateAvailableMoney(availableQuantities) {
      const availableMoneyElement = document.getElementById('availableMoney');
      if (availableMoneyElement) {
        if (Object.values(availableQuantities).every(count => count === 0)) {
          availableMoneyElement.innerHTML = '<h5 class="text-danger" style="font-size: medium; text-align: left">Thiếu, cần thêm tiền</h5>';
          return;
        }
        let availableMoneyHtml = '<h5 style="font-size: medium; text-align: left">Số lượng tờ tiền còn dư lại:</h5><ul>';
        Object.entries(availableQuantities).forEach(([denomination, count]) => {
          if (count > 0) {
            availableMoneyHtml += `<li class="text-success">${count} tờ ${parseInt(denomination).toLocaleString('vi-VN')} VNĐ</li>`;
          }
        });
        availableMoneyHtml += '</ul>';
        availableMoneyElement.innerHTML = availableMoneyHtml;
      }
    }

    function saveQuantitiesToSessionStorage() {
      const quantities = {};
      denominations.forEach(denomination => {
        const element = document.getElementById(`denomination${denomination}`);
        if (element) {
          quantities[denomination] = element.value;
        }
      });
      sessionStorage.setItem(`quantities_${dailySupplyId}`, JSON.stringify(quantities));
    }

    function loadQuantitiesFromSessionStorage() {
      const quantities = JSON.parse(sessionStorage.getItem(`quantities_${dailySupplyId}`));
      if (quantities) {
        denominations.forEach(denomination => {
          const element = document.getElementById(`denomination${denomination}`);
          if (element && quantities[denomination] !== undefined) {
            element.value = quantities[denomination];
          }
        });
      }
    }

    document.querySelectorAll('input[name="denomination"]').forEach(input => {
      input.addEventListener('input', () => {
        suggestMoneyDistributionForAll();
        saveQuantitiesToSessionStorage();
      });
    });

    document.addEventListener('DOMContentLoaded', loadQuantitiesFromSessionStorage);
  </script>
</body>

</html>